name: Run screener and publish CSV

on:
  schedule:
    # Toutes les 5 minutes, lundi->vendredi (en UTC)
    - cron: "*/5 * * * 1-5"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: screener-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # --- GATE AVANT CHECKOUT ---
      - name: Decide whether to run now (America/New_York)
        id: gate
        run: |
          set -e
          TZ="America/New_York"

          # ---- Config
          TARGETS=("09:30" "12:30" "15:50")   # heure de début des fenêtres
          WINDOW_MIN=30                       # durée de chaque fenêtre (minutes)
          MODULO_MIN=15                       # cadence à l'intérieur de la fenêtre
          TOL=1                               # tolérance (minutes) autour du modulo

          # ---- US Market Holidays (NYSE) 2025
          US_HOLIDAYS=("2025-01-01" "2025-01-20" "2025-02-17" "2025-04-18" "2025-05-26" \
                       "2025-06-19" "2025-07-04" "2025-09-01" "2025-11-27" "2025-12-25")

          # ---- Now (NY time)
          NOW_H=$(TZ=$TZ date +%H)
          NOW_M=$(TZ=$TZ date +%M)
          NOW_HM=$(TZ=$TZ date +%H:%M)
          NOW_MIN=$((10#$NOW_H * 60 + 10#$NOW_M))
          DOW=$(TZ=$TZ date +%u)
          DATE=$(TZ=$TZ date +%F)

          RUN=0

          # ---- Check holidays
          for h in "${US_HOLIDAYS[@]}"; do
            if [ "$DATE" = "$h" ]; then
              echo "Market holiday ($h) — skipping."
              echo "RUN=0" >> $GITHUB_ENV
              exit 0
            fi
          done

          # ---- Weekdays only
          if [ "$DOW" -lt 1 ] || [ "$DOW" -gt 5 ]; then
            echo "Weekend — skipping."
            echo "RUN=0" >> $GITHUB_ENV
            exit 0
          fi

          # ---- Window + modulo check
          in_window=0
          for t in "${TARGETS[@]}"; do
            SH=${t%:*}; SM=${t#*:}
            START_MIN=$((10#$SH * 60 + 10#$SM))
            END_MIN=$((START_MIN + WINDOW_MIN))

            if [ "$NOW_MIN" -ge "$START_MIN" ] && [ "$NOW_MIN" -lt "$END_MIN" ]; then
              in_window=1
              offset=$(( NOW_MIN - START_MIN ))
              mod=$(( offset % MODULO_MIN ))

              close_to_mark=0
              if [ "$mod" -le "$TOL" ]; then
                close_to_mark=1
              else
                diff=$(( MODULO_MIN - mod ))
                if [ "$diff" -le "$TOL" ]; then
                  close_to_mark=1
                fi
              fi

              if [ "$close_to_mark" -eq 1 ]; then
                RUN=1
                break
              fi
            fi
          done

          echo "NY time: $NOW_HM (DOW=$DOW, DATE=$DATE) | in_window=$in_window | RUN=$RUN"
          echo "RUN=$RUN" >> $GITHUB_ENV
          if [ "$RUN" -ne 1 ]; then
            echo "Outside window, holiday, or not on a 15-min mark — skipping heavy steps."
          fi

      - name: Checkout repo
        if: env.RUN == '1'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure clean working tree (sync to origin/main)
        if: env.RUN == '1'
        run: |
          git fetch origin main
          git reset --hard origin/main
          git clean -fd

      - name: Setup Python
        if: env.RUN == '1'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: env.RUN == '1'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate Russell2000 from iShares
        if: env.RUN == '1'
        run: python gen_r2000_from_ishares.py || true

      - name: Build sector catalog (R1K + SPSM)
        if: env.RUN == '1'
        run: python build_sector_catalog.py || true

      - name: Run screener
        if: env.RUN == '1'
        env:
          PYTHONUNBUFFERED: "1"
        run: python mix_ab_screen_indices.py

      - name: Run backtest
        if: env.RUN == '1'
        run: python backtest_signals.py

      - name: Fetch Fear & Greed (CNN)
        if: env.RUN == '1'
        run: python fetch_fear_greed.py

      - name: Commit CSVs if changed
        if: env.RUN == '1'
        run: |
          set -e
          # plus fiable que git diff --quiet : détecte aussi les fichiers non suivis
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes, skip commit"
            exit 0
          fi

          git add *.csv dashboard/public/*.csv || true
          git -c user.name="github-actions[bot]" \
              -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
              commit -m "auto: update CSV $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true

          git fetch origin main
          git merge -s recursive -X ours origin/main || true
          git push origin HEAD:main || true

          echo "--- git status ---"
          git status --porcelain
